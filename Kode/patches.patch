diff --git a/Kode/Heartbeat.py b/Kode/Heartbeat.py
index 04bd126..966e812 100644
--- a/Kode/Heartbeat.py
+++ b/Kode/Heartbeat.py
@@ -7,6 +7,8 @@ from socket import *
 import time, random, os, sys
 import thread, SimpleHTTPServer, SocketServer
 import Log
+import traceback
+
 state = ""
 broadcast_IP = '255.255.255.255'
 broadcast_PORT = 54545
@@ -37,6 +39,7 @@ class heartbeat():
     """
     Sender data ud til en given broadcast IP og PORT.
     """
+    #print "broadcast send:", data
     self.b_sock.sendto(data, (broadcast_IP, broadcast_PORT))
 
 
@@ -51,6 +54,8 @@ class heartbeat():
     s = socket(AF_INET, SOCK_DGRAM)
     s.connect(("google.com", 80))
     myIp = (s.getsockname()[0])
+    s = None
+
     ipLog = Log.log() 
     castTimer = 0
     ipList = []
@@ -58,6 +63,12 @@ class heartbeat():
     message = ""
     currentKey = -1
     expectedResponses = 1
+
+    sock = socket(AF_INET, SOCK_DGRAM)
+    sock.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)
+    sock.bind( ("", 5005))
+    sock.setblocking(0)
+
     while(True):
     # Lederen er ansvarlig for at opdatere loggen løbende via Heartbeats.
       if self.state == "leader":
@@ -84,24 +95,26 @@ class heartbeat():
 
         try:
           data, addr = sock.recvfrom(1024)
+          #print "xxxxxxxxxxxxxxxxxxxxx"
           if (data == "Voted"):
             pass
           else:
             print message 
             if (int(data) == currentKey):
                expectedResponses -= 1 
-            print ipLog.getLowestKey(), data 
+            print data, "<", ipLog.getLowestKey() 
             if (int(data) < int(ipLog.getLowestKey())):
-              s = socket(AF_INET,SOCK_DGRAM)
+              #s = socket(AF_INET,SOCK_DGRAM)
               print "magic"
-              s.sendto("ow:" + str(ipLog.getLog()) + "-" + str(ipLog.getList()), (addr[0], 5005))
+              sock.sendto("ow:" + str(ipLog.getLog()) + "-" + str(ipLog.getList()), (addr[0], 5005))
 
 
             if (int(data) != currentKey ):
               #Tjekker hvis en følger er bagud, sender bagud data
-              upToDateData = ipLog.compile(data)
-              s = socket(AF_INET,SOCK_DGRAM)
-              s.sendto(upToDateData, (addr[0], 5005))
+              upToDateData = ipLog.compile(int(data))
+              print "Sending", upToDateData, "..."
+              #s = socket(AF_INET,SOCK_DGRAM)
+              sock.sendto(upToDateData, (addr[0], 5005))
 
             elemNotSet = 1 # Til at checke om elementer er blevet placeret
 
@@ -113,12 +126,12 @@ class heartbeat():
               if sub == ipList[len(ipList)-1] and elemNotSet:
                 ipList.append([addr[0], time.time() + LTIMEOUT])
                 message = message + " ad:" + str(addr[0])
-                print message
+                #print message
                 ipLog.add(addr[0])
 
            # Printer en oversigt over IP-adresser samt
-            for sub in ipList:
-              print "[" + str(sub[0]) + "]"
+            #for sub in ipList:
+            #  print "[" + str(sub[0]) + "]"
         except:
           pass
         # Appender sig selv til at starte med.
@@ -177,31 +190,29 @@ class heartbeat():
           print "State set to: leader"
 
       elif self.state == "follower":
-        sock = socket(AF_INET, SOCK_DGRAM)
-        sock.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)
-        sock.bind( ("", 5005))
-        sock.setblocking(0)
-
         # Følgeren lytter på og besvarer lederens forspørgsler,
         # samt skifter til kandidat hvis den ikke hører fra lederen.
-        print "Leader-election in:", timer - time.time()
+        #print "Leader-election in:", timer - time.time()
         try:
           data, addr = sock.recvfrom(1024)
-          print data
+          print "from leader:", data
           ipLog.parse(data)
+
+          print ipLog.getLog()
         except:
-          pass  
+          traceback.print_exc(file=sys.stdout)  
  
         try:
           message, addr = self.b_sock.recvfrom(1024)
+          #print "received:", message
           ########print "Broadcast ip-address:",  addr
-          print ipLog.getLog()
+          #print ipLog.getLog()
           # Stemmer på kandidat hvis den modtager besked.
           # Stemmer kun 1 gang per valg.
           if message == "Vote" and tLastVote < time.time():
             tLastVote = time.time() + LTIMEOUT
-            s = socket(AF_INET, SOCK_DGRAM)
-            s.sendto("Voted", (addr[0], 5005))
+            #s = socket(AF_INET, SOCK_DGRAM)
+            sock.sendto("Voted", (addr[0], 5005))
           else:
             # Svarer på lederens heartbeat.
             # Opdaterer loggen
@@ -209,8 +220,11 @@ class heartbeat():
             key = splittext[0]
             msg = splittext[1]
             ipLog.parse(msg)
-            s = socket(AF_INET,SOCK_DGRAM)
-            s.sendto(str(ipLog.getKey()), (addr[0], 5005))
+            #s = socket(AF_INET,SOCK_DGRAM)
+            if len(ipLog.getLog()) == 0 and ipLog.getKey() == 0:
+              sock.sendto(str(-1), (addr[0], 5005))
+            else:
+              sock.sendto(str(ipLog.getKey()), (addr[0], 5005))
             timer = time.time() + random.uniform(2.0, 5.0)
         except:
           pass
diff --git a/Kode/Log.py b/Kode/Log.py
index 76e28e5..42b4282 100644
--- a/Kode/Log.py
+++ b/Kode/Log.py
@@ -20,13 +20,13 @@ class log():
     self.key += 1
 
   def overwrite(self, newLog):
-    print "o1"
+    print "o1", newLog
     data = newLog.split("-") 
-    print "o2"
+    print "o2", data
     self.log = eval(data[0])
-    print "o3"
+    print "o3", self.log
     self.ipList = eval(data[1])
-    print "04"
+    print "04", self.ipList
     self.key = self.log[len(self.log)-1][0]
     print self.ipList, self.log, self.key
 
@@ -37,7 +37,12 @@ class log():
     pass
 
   def parse(self, text):
-    textSplit = text.split()    
+    if text[0:3] == "ow:":
+      self.overwrite(text[3:])
+      return
+
+    textSplit = text.split() 
+
     for sub in textSplit:
       if sub[0:3] == "ad:":
         self.add(sub[3:])
@@ -62,6 +67,7 @@ class log():
   def compile(self,key):
     text = ""
     for sub in self.log:
+      print "test", sub, key
       if sub[0] > key:
         text = text + sub[1] + " "
     return text
index 58e9fcf..9f35406 100644
Binary files a/Kode/Log.pyc and b/Kode/Log.pyc differ
